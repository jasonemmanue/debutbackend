// =================================================================
// Schema Prisma Final et Corrigé
// =================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// MODÈLE USER MIS À JOUR AVEC TOUTES LES RELATIONS INVERSES
// =================================================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  mot_de_passe  String?
  image         String?
  type          TypeAbonne?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // --- Relations Auth.js ---
  accounts      Account[]
  sessions      Session[]

  // --- Relations vers les profils (1-à-1) ---
  entreprise    Entreprise?
  employe       Employe? // Champ de retour pour le modèle Employe
  particulier   Particulier? // Champ de retour pour le modèle Particulier
  stagiaire     Stagiaire? // Champ de retour pour le modèle Stagiaire
  partenaire    Partenaire? // Champ de retour pour le modèle Partenaire

  // --- Relations vers les activités (1-à-N) ---
  annonces_crees   Annonce[] // Champ de retour pour Annonce.createur
  commentaires     Commentaire[]     @relation("auteur_commentaire")
  reactions        ReactionAnnonce[] @relation("auteur_reaction")
  followed         Follow[]
  createdEvents    Evenement[]       @relation("CreateurEvenement")
  participations   ParticipationEvenement[] // Champ de retour pour ParticipationEvenement.abonne
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =================================================================
// VOS TABLES MÉTIER
// =================================================================

model Entreprise {
  id                 String    @id @default(cuid())
  secteur_activite   String?
  adresse            String?
  site_web           String?
  description        String?
  logo               String?
  raison_sociale     String?
  date_de_creation   DateTime?
  certifications     String[]  @default([])
  services_proposes  String[]  @default([])
  nombre_employes    Int?
  horaires_ouverture String?
  pays               String?
  ville              String?
  sites              String[]  @default([])
  contacts           String[]  @default([])
  images             String[]  @default([])

  user         User         @relation(fields: [userId], references: [id])
  userId       String       @unique
  prestations  Prestation[]
  stages       Stage[]
  employes     Employe[]
  followedBy   Follow[]
}

model Follow {
  userId       String
  entrepriseId String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  entreprise Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)

  @@id([userId, entrepriseId])
  @@map("followed_companies")
}

model Employe {
  id            String    @id @default(cuid())
  poste         String?
  competences   String?   @db.Text
  date_embauche DateTime?

  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  entreprise    Entreprise @relation(fields: [entrepriseId], references: [id])
  entrepriseId  String
}

model Particulier {
  id        String  @id @default(cuid())
  adresse   String? @db.Text
  telephone String?
  interets  String? @db.Text

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Stagiaire {
  id             String         @id @default(cuid())
  niveau_etudes  String?
  domaine_etudes String?
  competences    String?        @db.Text

  user           User           @relation(fields: [userId], references: [id])
  userId         String         @unique
  demandes_stage DemandeStage[]
}

model Partenaire {
  id                       String       @id @default(cuid())
  type_partenariat         String?
  date_debut_partenariat   DateTime?
  date_fin_partenariat     DateTime?

  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  prestations Prestation[]
}

model Evenement {
  id             String                   @id @default(cuid())
  titre          String
  description    String?                  @db.Text
  date_debut     DateTime?
  date_fin       DateTime?
  lieu           String?

  createur       User                     @relation("CreateurEvenement", fields: [createurId], references: [id])
  createurId     String
  participations ParticipationEvenement[]
}

model Prestation {
  id           String    @id @default(cuid())
  titre        String
  description  String?   @db.Text
  tarif        Decimal?

  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id])
  entrepriseId String
  partenaire   Partenaire? @relation(fields: [partenaireId], references: [id])
  partenaireId String?
}

model Stage {
  id                   String   @id @default(cuid())
  titre                String
  description          String?
  date_debut           DateTime?
  date_fin             DateTime?
  duree_stage          String?
  competences_requises String?
  niveau_etude_requis  String?
  remunere             Boolean  @default(false)

  entrepriseId String
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id])
  demandes     DemandeStage[]
}

model Annonce {
  id               String            @id @default(cuid())
  titre            String
  contenu          String?           @db.Text
  date_publication DateTime?         @default(now())

  createur         User              @relation(fields: [createurId], references: [id])
  createurId       String
  commentaires     Commentaire[]
  reactions        ReactionAnnonce[]
}

model Commentaire {
  id            String   @id @default(cuid())
  contenu       String   @db.Text
  date_creation DateTime @default(now())

  annonce     Annonce @relation(fields: [annonceId], references: [id])
  annonceId   String
  abonne      User    @relation("auteur_commentaire", fields: [abonneId], references: [id])
  abonneId    String
}

model DemandeStage {
  id                String        @id @default(cuid())
  date_demande      DateTime      @default(now())
  statut            StatutDemande @default(en_attente)
  lettre_motivation String?
  cv_path           String?

  stageId     String
  stagiaireId String
  stage       Stage     @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stagiaire   Stagiaire @relation(fields: [stagiaireId], references: [id], onDelete: Cascade)

  @@unique([stageId, stagiaireId])
}

model ParticipationEvenement {
  id          String              @id @default(cuid())
  statut      StatutParticipation @default(inscrit)

  evenement   Evenement @relation(fields: [evenementId], references: [id])
  evenementId String
  abonne      User      @relation(fields: [abonneId], references: [id])
  abonneId    String
}

model ReactionAnnonce {
  id            String           @id @default(cuid())
  type_reaction TypeReactionEnum
  date_reaction DateTime         @default(now())

  annonce     Annonce @relation(fields: [annonceId], references: [id])
  annonceId   String
  abonne      User    @relation("auteur_reaction", fields: [abonneId], references: [id])
  abonneId    String
}

// =================================================================
// ENUMS
// =================================================================

enum TypeAbonne {
  client
  entreprise
  employe
  particulier
  stagiaire
  partenaire
}

enum UserRole {
  USER
  ADMIN
}

enum StatutDemande {
  en_attente
  accepte
  refuse
}

enum StatutParticipation {
  inscrit
  present
  absent
}

enum TypeReactionEnum {
  like
  partage
  interesse
}